syntax = "proto3";

package dev.preco.nxzr;

import "google/protobuf/timestamp.proto";

// Manages connection between the Switch and the server daemon.
service Nxzr {
  // Can be used for cross-checking if the selected device from the client side
  // is still valid on the server.
  rpc GetDeviceStatus(GetDeviceStatusRequest) returns (GetDeviceStatusResponse) {}

  // For Switch connection management.
  rpc ConnectSwitch(ConnectSwitchRequest) returns (stream ConnectSwitchResponse) {}
  rpc ReconnectSwitch(ReconnectSwitchRequest) returns (stream ReconnectSwitchResponse) {}

  // For protocol inquiry. (requires connection to device)
  rpc GetProtocolState(GetProtocolStateRequest) returns (GetProtocolStateResponse) {}

  // For high-frequency controller state updates. (requires connection to device)
  rpc ControlStream(stream ControlStreamRequest) returns (stream ControlStreamResponse) {}
}

message GetDeviceStatusRequest {}
message GetDeviceStatusResponse {
  string adapter_address = 2;
  repeated string paired_switch_addresses = 1;
}

message ConnectSwitchRequest {}
message ConnectSwitchResponse {
  oneof res {
    ConnectionMetadata metadata = 1;
    ConnectionEvent event = 2;
  }
}

message ReconnectSwitchRequest {
  string reconnect_address = 2;
}
message ReconnectSwitchResponse {
  oneof res {
    ConnectionMetadata metadata = 1;
    ConnectionEvent event = 2;
  }
}

message ConnectionEvent {
  enum EventLogKind {
    UNSPECIFIED = 0;
    CONNECTING = 1;
    CONNECTED = 2;
    DISCONNECTING = 3;
    DISCONNECTED = 4;
    SUBCOMMAND_RECEIVED = 5;
    PAIRING_ENDED = 6;
  }
  message EventLog {
    EventLogKind kind = 1;
    string message = 2;
  }
  oneof kind {
    EventLog log = 1;
    Error error = 3;
    Warning warning = 4;
  }
}

message GetProtocolStateRequest {}
message GetProtocolStateResponse {
  bool is_pairing = 1;
  double send_interval = 2;
  optional uint32 report_mode = 3;
  google.protobuf.Timestamp connected_at = 4;
  string controller_state_dump = 5;
}

message ControlStreamRequest {
  string request_id = 1;
  map<string, bool> button_map = 2;
  optional Position left_stick_pos = 3;
  optional Position right_stick_pos = 4;
  optional Position imu_pos = 5;
}

message ControlStreamResponse {
  string request_id = 1;
  bool success = 2;
}

message Position {
  float x = 1;
  float y = 2;
}

message ConnectionMetadata {
  string adapter_address = 2;
  string target_address = 3;
}

message Error {
  string message = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message Warning {
  string message = 1;
  google.protobuf.Timestamp timestamp = 2;
}
